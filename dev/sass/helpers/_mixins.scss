// mixin de transitions
@mixin transition-eclair($scope: all, $duree: .3s, $delai: 0s) {
    transition: $scope $duree ease-in-out $delai;
}

@mixin animation($nom, $duree: .3s, $delai: 0s) {
    animation: $nom $duree ease-in-out $delai backwards;
} 

@keyframes up {
    from {
        transform: translateY(10vh);
        opacity: 0;
    }
    to {
        transform: translateY(0);
        opacity: 1;
    }
}
@keyframes down {
    from {
        transform: translateY(-2vh);
        opacity: 0;
    }
    to {
        transform: translateY(0);
        opacity: 1;
    }
}
@keyframes zoom {
    from {
        transform: scale(0%);
        opacity: 0;
    }
    to {
        transform: scale(100%);
        opacity: 1;
    }
}

//flexer et centrer
@mixin flex-auto ($display: flex, $direction: row, $justify: center, $align: center) {
    display: $display;
    flex-direction: $direction;
    justify-content: $justify;
    align-items: $align;
}

@mixin inner-spacing ($unit: 1) {
    padding-top: calc($space * $unit);
    padding-bottom: calc($space * $unit);
    gap: calc($space * $unit);
}

@mixin outer-spacing ($unit: 1) {
    margin: calc($space * $unit) 0;
    padding-right: calc($space * $unit);
    padding-left: calc($space * $unit)
}

@mixin type ($size: size) {
    font-size: calc($size * .1em + $size * 1px);
}

//button
@mixin button ($borderStyle: solid 1px, $border-radius: 0, $padding: 1em 1.5em, $color: #333) {
    border: $border $color;
    border-radius: $border-radius;
    padding: $padding;
    background-color: transparent;
    text-decoration: none;
    color: #333;
    box-sizing: border-box;
    width: fit-content;
}

// hover
@mixin hoverable ($children: false, $background: false, $yellowify: false) {
    @include transition-eclair;
    cursor: pointer;
    &:hover  {
        @if ($background) {
            @if ($yellowify) {
                background-color: $yellow;
                color: $white;
            }
            @else {
                background-color: $black;
                color: $white;
            }
        }
        @else {
            @if ($yellowify) {
                color: $yellow;
            }
            @else {
                color: $black;
            }
        }
        @if ($children) {
            * {
                @include transition-eclair;
                @if ($background) {
                    @if ($lighten) {
                        background-color: $yellow;
                        color: $black;
                    }
                    @else {
                        background-color: $black;
                        color: $white;
                    }
                }
                @else {
                    @if ($lighten) {
                        color: $yellow;
                    }
                    @else {
                        color: $black;
                    }
                }
            }
        }
    }
}

// overlay after
@mixin overlay-after ($bg: $black, $opacity: .3, $z-index: -1) {
    z-index: $z-index;
    position: relative;
    &::after {
        background: $bg;
        position: absolute;
        content: '';
        width: 100%;
        height: 100%;
        top: 0;
        left: 0;
        opacity: $opacity;
        z-index: $z-index + 1;
    }
    * {
        z-index: $z-index + 3;
    }
}

// overlay before
@mixin overlay-before ($bg: #333, $opacity: .3, $z-index: -1) {
    z-index: $z-index;
    position: relative;
    &::before {
        background: $bg;
        position: absolute;
        content: '';
        width: 100%;
        height: 100%;
        top: 0;
        left: 0;
        opacity: $opacity;
        z-index: $z-index + 2;
    }
}


//carre 
@mixin carre ($size: 150px) {
    width: $size;
    height: $size;
}

//cercle 
@mixin cercle ($size: 150px) {
    border-radius: 999px;
    @include carre($size);
}


//nav
@mixin nav-fixe ($background-color: #333,$color: #fff, $direction: row, $fixed: true) {
    background-color: $background-color;

    @if $fixed {
        position: fixed;
        top: 0;
        right: 0;
    } @else {
        position: static;
    }
    width: 100%;
    height: 2em;
    display: flex;
    flex-direction: $direction;
    justify-content: space-around;
    align-items: center;
    a {
        display: block;
        text-decoration: none;
        color: $color;
    }
}

@mixin fontawesome-list ($padding: 1.3em) {
    ul {
        list-style: none;
        padding: 0;
    }
    li {
        &::before {
            font-family: FontAwesome;
            display: inline-block;
            margin-left: calc (0 - $padding);
            width: $padding;
            margin-right: calc($padding / 2);
        }
    }
}

// adapation du display en vertical
@mixin convert-to-vertical($display: flex, $screen: $small-screen, $resize-items: $width, $gap: 2rem) {
    @if ($screen == $small-screen) {
            @media screen and (max-width: $small-screen) {
            @if ($display == flex) {
                flex-direction: column;
                gap: $gap;
                @if ($resize-items == default) {
                    &>* { width: unset; }
                } @else if ($resize-items == full) {
                    &>* { width: 100%; }
                } @else {
                    &>* { width: $width }
                }
            }
        }
    } @else if ($screen == $tablet) {
        @media screen and (max-width: $tablet) {
            @if ($display == flex) {
                flex-direction: column;
                gap: $gap;
                @if ($resize-items == default) {
                    &>* { width: unset; }
                } @else if ($resize-items == full) {
                    &>* { width: 100%; }
                } @else {
                    &>* { width: $width }
                }
            }
        }
    } @else {
        @media screen and (max-width: $smartphone) {
            @if ($display == flex) {
                flex-direction: column;
                gap: $gap;
                @if ($resize-items == default) {
                    &>* { width: unset; }
                } @else if ($resize-items == full) {
                    &>* { width: 100%; }
                } @else {
                    &>* { width: $width }
                }
            }
        }
    }
}

// s'applique sur un container ; /!\ utilise flex
@mixin side-ribbon ($resize: $small-screen) {
    display: flex;
    flex-direction: row;
    overflow: hidden;
    @media screen and (max-width: $resize) {
        flex-direction: column;
    }
    .side-ribbon {
        width: 2em;
        text-align: center;
        padding: calc($gap * 2);
        margin-right: calc(0rem - (4 * $gap));
        margin-left: calc(0rem - $gap);
        z-index: 2;
        writing-mode: vertical-lr;
        @media screen and (max-width: $resize) {
            width: 100%;
            height: 2em;
            writing-mode: horizontal-tb;
            margin-right: 0;
            margin-left: 0;
            margin-bottom: calc(0rem - (4 * $gap));
            margin-top: calc(0rem - $gap);
        }
    }
}

@mixin material-popout ($on-hover: false) {
    @if ($on-hover: true) {
        @include transition-eclair;
        &:hover {
            box-shadow: $medium 0px 8px 24px;
        }
    }
    @else {
        box-shadow: $medium 0px 8px 24px;
    }
}